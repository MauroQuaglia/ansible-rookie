---

# Occhio che la variabile ansible_facts viene creata in automatico da Ansible, quindi cerchiamo di non sovrascrivergliela per sbaglio noi!
- name: Example of Gather Facts
  hosts: vagrant
  #serial: 1 # Serve per fare girare il playbook su una macchina per volta
  gather_facts: true

  tasks:
    - name: Print information
      debug:
        var: ansible_facts.lsb.description # Per vedere solo questa!
        #var: ansible_facts # Per vedere tutte le proprietà!

    - name: "Concatenate information with ~ symbol"
      debug:
        msg: "The architecture and bios date are: {{ ansible_facts.architecture ~':'~ansible_facts.bios_date  }}"

    # Anche questo è un modo di vedere le informazioni ma concatenandole con la sintassi ">-" per andare su più righe.
    - name: Print more information
      debug:
        msg: >-
          os_family: {{ ansible_facts.os_family}},
          distro: {{ ansible_facts.distribution}} {{ ansible_facts.distribution_version}},
          kernel: {{ ansible_facts.kernel }}

    # Come stamapre a terminale il valore di una variabile tornatada un modulo eseguito su un hsot.
    - name: "Each Ansible module returns results in JSON format. To use the result I must create a registered variable"
      command: whoami
      register: login
    # E' l'unico modo che c'è con ansible per vedere per completo il dictionary che ritorna la response.
    # Scrive il JSON completo di risposta a terminale
    # Quando poi ho individuato la variabile posso anche eliminare questo pezzettino.
    - debug:
        var: login
    # Una volta poi che  ho capito quale variabile mi interessa scrivo a video solo quello, in questo caso è login.stdout, cioè il comando
    # whoami eseguito sull'host remoto.
    # stdout è l'output del comando whoami.
    - debug:
        msg: "Response is: {{ login.stdout }}"

    # Posso anche ignorare quando un modulo torna un errore, così che il Play non si interrompa.
    # Ma per utilità posso anche catturare l'output dell'errore e mostrarlo a video, magari mi può essere utile.
    # Ansible ci pensa già lui a dare errore, ma non si sa mai che possa tornare  utile la cosa.
    - name: "Run and ignore failure but print the error"
      command: "comando-inesistente"
      ignore_errors: true
      register: result
    - debug:
        var: result

...
